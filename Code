import time
import random
import math
import turtle
#got this stuff from wardialler and hacker typer. 
#showedPrograms is a list with 4 items, all of which are from allPrograms. 
#the 4 lines on the turtle window display these 4 items.
#the first item in showedPrograms is removed, and a new one is popped in at random.
#this simulates a scrolling effect.
#actualPrompts are what the code will ask the user to type in
allPrograms = ["struct group_info init_groups = { .usage = ATOMIC_INIT(2) };","struct group_info *groups_alloc(int gidsetsize){","struct group_info *group_info;","int nblocks;","int i;","nblocks = (gidsetsize + NGROUPS_PER_BLOCK - 1) / NGROUPS_PER_BLOCK;","/* Make sure we always allocate at least one indirect block pointer */","nblocks = nblocks ? : 1;","group_info = kmalloc(sizeof(*group_info) + nblocks*sizeof(gid_t *), GFP_USER);", "if (!group_info){return NULL;}}"]
showedPrograms = ["","","",""]
actualPrompts = ["intuition","critic","judgement","deconstruction","insight","sensation","fracture","perception","compulsion","trust",]
currentLine = 0
whichPrompt = 0
#this part draws the interface
t = turtle.Turtle()
t.hideturtle()
t.speed(0)
t.penup()
t.color("light green")
t.screen.bgcolor("black")
t.goto(-250,-150)
t.pendown()
t.forward(500)
t.left(90)
t.forward(300)
t.left(90)
t.forward(500)
t.left(90)
t.forward(300)
class lineOfCode:
  #this part creates the turtles that will display the lines of code.
  line1 = turtle.Turtle()
  line1.penup()
  line1.hideturtle()
  line1.speed(0)
  line1.color("light green")
  line2 = turtle.Turtle()
  line2.penup()
  line2.hideturtle()
  line2.speed(0)
  line2.color("light green")
  line3 = turtle.Turtle()
  line3.penup()
  line3.hideturtle()
  line3.speed(0)
  line3.color("light green")
  line4 = turtle.Turtle()
  line4.penup()
  line4.hideturtle()
  line4.speed(0)
  line4.color("light green")
  #this part sets the position of the code writers.
  def __init__(self, yPos):
    self.yPos = yPos
    if self.yPos == 130:
      self.line1.goto(0, self.yPos)
      return
    elif self.yPos == 60:
      self.line2.goto(0, self.yPos)
      return
    elif self.yPos == -10:
      self.line3.goto(0, self.yPos)
      return
    elif self.yPos == -80:
      self.line4.goto(0, self.yPos)
      return
  #if every line of code is filled, print updates each line such that it seems like the lines scroll.
  def print(self):
    if currentLine >= 4:
      self.line1.clear()
      self.line1.write(showedPrograms[0],align="center",font=("Arial",8,"normal"))
      self.line2.clear()
      self.line2.write(showedPrograms[1],align="center",font=("Arial",8,"normal"))
      self.line3.clear()
      self.line3.write(showedPrograms[2],align="center",font=("Arial",8,"normal"))
      self.line4.clear()
      self.line4.write(showedPrograms[3],align="center",font=("Arial",8,"normal"))
    #if not every line of code is filled, print fills the lines of code when necessary.
    else:
      if currentLine == 0:
        self.line1.clear()
        self.line1.write(showedPrograms[0],align="center",font=("Arial",8,"normal"))
      elif currentLine == 1:
        self.line2.clear()
        self.line2.write(showedPrograms[1],align="center",font=("Arial",8,"normal"))
      elif currentLine == 2:
        self.line3.clear()
        self.line3.write(showedPrograms[2],align="center",font=("Arial",8,"normal"))
      elif currentLine == 3:
        self.line4.clear()
        self.line4.write(showedPrograms[3],align="center",font=("Arial",8,"normal"))
#this stuff establishes the 4 code containers using the class lineOfCode
line1 = lineOfCode(130)
line2 = lineOfCode(60)
line3 = lineOfCode(-10)
line4 = lineOfCode(-80)
print("You are a hacker, and you're about to hack into Decker Inc's database.")
#i got the name Decker Inc. from DEAD FACE.
answer = input("Type START to begin hacking. ")
if answer == "START":
  #this is a timer. start doesn't update its time, but end does. this shows us how much time has passed since you typed START.
  start = time.time()
  end = time.time()
  #fill in showedPrograms
  for i in range(4):
    showedPrograms[i] = allPrograms[i]
  #while you haven't lost or won,
  while math.floor(end-start) <= 60 and currentLine<10:
    #choose which prompt to ask and then ask to type it.
    whichPrompt = random.randint(0,len(actualPrompts)-1)
    answer = input("Type " + actualPrompts[whichPrompt] + ": ")
    #if you spell the prompt correctly,
    if answer == actualPrompts[whichPrompt]:
      #remove that prompt.
      actualPrompts.remove(actualPrompts[whichPrompt])
      #then, call the print function. i only need to use line1 beacuse print updates line1, line2, line3, and line4 at the same time.
      line1.print()
      # andincrement currentLine by 1 to show that 1 line has printed.
      currentLine+=1
      #if the box is filled with 4 lines, remove the first item of allPrograms.
      if currentLine >= 4:
        allPrograms.pop(0)
      #now that the first item of allPrograms is removed, change showedPrograms's items such that when print() is called, every line of code looks like it scrolled to make space for a new line.
      if len(allPrograms) > 4:
        for i in range(4):
          showedPrograms[i] = allPrograms[i]
      #update end to check whether you took too much time.
      end = time.time()
    #if you typed it wrong, you lose
    else:
      print("Uh-oh! You made a typo. Your mistake was detected and were sent to jail.")
      break
  #checks if 60 seconds have passed. if 60 seconds have passed, you lose.
  if math.floor(end-start) >= 60:
    print("You took too long to hack into the system. You were detected and were sent to jail.")
  #checks if there are no more prompts to ask you (e.g. you typed everything). if there aren't any, you win.
  elif len(actualPrompts) == 0:
    #hard codes the final display in turtle because i couldn't get it to work.
    showedPrograms = ["/* Make sure we always allocate at least one indirect block pointer */","nblocks = nblocks ? : 1;","group_info = kmalloc(sizeof(*group_info) + nblocks*sizeof(gid_t *), GFP_USER);","if (!group_info){return NULL;}}"]
    line1.print()
    print("You successfully hacked into the system and sold the data you gathered. Now you are rich and can live the rest of your life in luxury.")
    
    
